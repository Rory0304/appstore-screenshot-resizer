name: Deploy to development

on:
    workflow_dispatch:
    workflow_call:
    push:
        branches: [develop]

permissions:
    id-token: write # Required for OIDC authentication

env:
    STAGE: development
    AWS_REGION: ap-northeast-2
    AWS_ECR_REPOSITORY: app-screenshot-resizer/dev

jobs:
    CI:
        uses: ./.github/workflows/ci.yml
        secrets: inherit

    CD:
        needs: CI
        runs-on: ubuntu-latest
        steps:
            # 1. Checkout code
            - uses: actions/checkout@v4
              with:
                  token: ${{ secrets.WORKFLOW_TOKEN }}

            - uses: actions/setup-node@v4
              with:
                  node-version: 20

            # 2. AWS Credentials (role based)
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v3
              with:
                  role-to-assume: arn:aws:iam::499888194301:role/github_action
                  aws-region: ${{ env.AWS_REGION }}

            # 3. AWS ECR Login
            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            # 4. Build and push Docker image
            - name: Build, tag, and push docker image to Amazon ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ env.AWS_ECR_REPOSITORY }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

            # 5. Deploy to EC2
            - name: Deploy to EC2
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ env.AWS_ECR_REPOSITORY }}
                  IMAGE_TAG: ${{ github.sha }}
              uses: appleboy/ssh-action@v0.1.5
                with:
                    host: ${{ secrets.EC2_IP_ADDRESS }}
                    username: ubuntu
                    key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
                    envs: ECR_REGISTRY, IMAGE_TAG, ECR_REPOSITORY, AWS_REGION
                    script: |
                        cd /home/ubuntu/app-screenshot-resizer
                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
                        sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                        sudo docker stop app-screenshot-resizer || true
                        sudo docker rm app-screenshot-resizer || true
                        sudo docker run -d --name app-screenshot-resizer -p 80:3000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG